.model tiny
.stack 100h
.code
org 100h

start:
    lea si, num
    mov word ptr num_value, 0  

next_digit:
    mov al, [si]
    cmp al, '$'
    je convert_done
    sub al, '0'
    cbw
    push ax
    mov ax, num_value
    mov bx, 10
    mul bx
    pop bx
    add ax, bx
    mov num_value, ax
    inc si
    jmp next_digit

convert_done:

    mov ax, num_value
    mov cx, 16
    mov bx, ax
    mov si, 0

print_bits:
    shl bx, 1
    jc bit1
    cmp si, 0
    je skip
    mov dl, '0'
    mov ah, 02h
    int 21h
    jmp continue

bit1:
    mov si, 1
    mov dl, '1'
    mov ah, 02h
    int 21h
    jmp continue

skip:
    loop print_bits
    jmp done

continue:
    loop print_bits

done:
    mov ah, 4Ch
    int 21h

; === Дані ===
num db '413$', 0
num_value dw 0

end start
